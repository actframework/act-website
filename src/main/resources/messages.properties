main.title=Act.Framework
main.about=About
main.description=The Act.Framework web site
main.doc=Document
index.title=An easy to use MVC framework for Java Developer
index.link.doc=Document
index.link.get-act=Get Act.Framework!
nav.about=About
nav.tutorials=Tutorials
nav.documentation=Documentation
nav.support=Support
nav.news=News
nav.getstarted=Get Started
nav.introduction=Introduction
header.headline=Enterprise grade. Half the code.
header.subline=Finally a Java MVC framework that's fun to use, but isn't a toy.
button.more=Find Out More
news.headline=Latest News
introduction.headline=Introducing Act.Framework
introduction.box1.title=A Full Stack MVC Framework.
introduction.box1.desc=Applications start in seconds. No servlets or containers.
introduction.box2.title=Developer Joy and Enterprise Features.
introduction.box2.desc=Clean and expressive.<br>Hot reload everywhere.<br>Faster than Spring boot.
introduction.box3.title=Superbly RESTful. Powerful Rendering.
introduction.box3.desc=Natively RESTful or render.<br>Use Rythm, Velocity, FreeMarker, Thymeleaf, Mustache or Beetl.
introduction.box4.title=Uncompromising Security.
introduction.box4.desc=Security aware means built-in enterprise-grade protection by default.
introduction.headline2=More Act.Framework Features
feature.fullstack.title=A full stack MVC framework
feature.fullstack.desc=<p>An Act.Framework application has the main method and start in seconds.</p><p>Act is not a servlet framework and Act application does not run in a Servlet container</p>
feature.devexp.title=Unbeatable development experience with great performance
feature.devexp.desc=<p>Act.Framework supports hot-reload applications and it takes less than a second to reload your normal sized app (in our 10K LOC app, takes around 500ms to reload app). Hot reload happens when your Java source code, template code or configuration files has been changed</p><p>While providing great developer experience, performance is still a very important aspect of Act.Framework. According to <a href="https://www.techempower.com/benchmarks/">this</a> benchmark project, Act.Framework is 20 times faster than Spring boot in simple cases.</p>
feature.di.title=Dependency injection
feature.di.desc=<p>Fully JSR 330 support and even more: </p> <ul> <li>Inject parameter for methods including action handler, mail sender, job method etc</li> <li>Inject collections</li> <li>Customizable injection tag, e.g. <code>@LoginUser</code></li> </ul>
feature.spa.title=SPA/Mobile app support
feature.spa.desc=<p>Supports the trends of separate front end architecture via: </p> <ul> <li> RESTful support </li> <li> Built-in CORS support </li> <li> Session/Header mapping </li> </ul> 
feature.security.title=Uncompromised security
feature.security.desc=<p>Act.Framework is a security aware framework, it builds uncompromised security support into your application </p> <ul> <li>Session cookie is secure and http only, payload is signed and encrypted (optionally)</li> <li>Enable CSRF prevention with just one configuration item</li> <li>XSS prevention: Rythm engine escape variable output by default</li> <li>Implementing your authentication/authorisation/accounting framework using <a href="https://github.com/actframework/act-aaa-plugin">AAA plugin</a> </li> </ul> 
feature.anno.title=Annotation aware but not annotation stack
feature.anno.desc1=<p>Annotation is one of the tool Act.Framework used to increase expressiveness. However we do not appreciate <a href="http://annotatiomania.com/">crazy annotation stacked code</a>. Instead we make the code express intention in a natural way, and save the use of annotations whenever possible.</p> <p>For example, for the following SpringMVC code:</p>
feature.anno.desc2=<p>The corresponding Act.Framework app code is:</p>
feature.anno.desc3=<p>No doubt Act.Framework code is simpler and clearer when compared with SpringMVC code.</p>
feature.conf.title=Multi-environment configuration
feature.conf.desc1=<p>Act.Framework supports the concept of <code>profile</code> which allows you to organize your configurations in different environment (defined by profile) easily. Take a look at the following configurations from one of our real project:</p>
feature.conf.desc2=<p>Suppose on your UAT server, you start the application with JVM option <code>-Dprofile=uat</code>, Act.Framework will load the configuration in the following sequence:</p> <ol> <li>Read all <code>.properties</code> files in the <code>/resources/conf/common</code> dir</li> <li>Read all <code>.properties</code> files in the <code>/resources/conf/uat</code> dir</li> </ol> <p>This way Act.Framework use the configuration items defined in <code>uat</code> profile to overwrite the same items defined in <code>common</code> profile. The common items that are not overwritten still effective.</p> 
feature.db.title=Simple yet powerful database support
feature.db.desc=<p>Act.Framework provides a decent set of database access APIs via <code>act.db.Dao</code> and relevant interfaces. </p> <ul> <li><a href="https://github.com/actframework/act-ebean">act-ebean</a> plugin implemented the Act.Framework database layer based on the fast and simple <a href="http://ebean-orm.github.io/">ebean ORM</a> library, which works with most SQL database solutions on the market </li> <li> <a href="https://github.com/actframework/act-morphia">act-morphia</a> plugin implemented the Act.Framework database layer based on the official <a href="https://mongodb.github.io/morphia/">Morphia</a> document mapper for MongoDB </li> </ul> 
feature.mdb.title=Multiple database support
feature.mdb.desc1=<p>It is not unusual for today's application to play with multiple and even heterogeneous database storage. Act.Framework has already built-in the support for that. For example:</p>
feature.mdb.desc2=<p>The above code shows how to configure two databases with one for SQL database and the other one for MongoDB. Once you have two database configured, it is super easy to map your model class to database via the <code>@DB</code> annotation.</p>
feature.view.title=Powerful view architecture with multiple render engine support
feature.view.desc=<p>For more traditional application design that requires server-side page rendering, Act.Framework by default uses the <a href="http://rythmengine.org/">Rythm Template Engine</a>. And it supports using your favorite template engine including: </p> <ul> <li> <a href="http://velocity.apache.org/">Velocity</a> through <a href="https://github.com/actframework/act-velocity">Velocity plugin</a> </li> <li> <a href="http://freemarker.org/">FreeMarker</a> through <a href="https://github.com/actframework/act-freemarker">FreeMarker plugin</a> </li> <li> <a href="http://www.thymeleaf.org/">Thymeleaf</a> through <a href="https://github.com/actframework/act-thymeleaf">Thymeleaf plugin</a> </li> <li> <a href="https://mustache.github.io/">Mustache</a> through <a href="https://github.com/actframework/act-mustache">Mustache plugin</a> </li> <li> <a href="http://ibeetl.com/">Beetl</a> through <a href="https://github.com/actframework/act-beetl">Beetl plugin</a> </li> </ul> <p> Act.Framework support using multiple template engines in the same projects.</p> 
feature.misc.title=Misc features
feature.misc.desc=<p>Act.Framework provides rich feature set that covers most of your web application development needs: </p> <ul> <li> <a href="/doc/email">Sending email</a> </li> <li> <a href="/doc/job">Schedule Jobs</a> </li> <li> <a href="/doc/event">Event handling and dispatching</a> </li> </ul> 
getstarted.headline=Get Started. Fast.
getstarted.body=<p>Act.Framework sample projects are driven by <a href="https://maven.apache.org/what-is-maven.html" class="text-faded">Maven</a>. You can choose from the following sample project skeletons to start your own Act.Framework application.</p> <p>Once you've downloaded a sample skeleton, import it into your <a href="https://www.jetbrains.com/idea/" class="text-faded">IDE</a>, let Maven resolve dependencies, and just rename your package and entry class.</p> <p>Then you're good to <a href="http://giphy.com/gifs/hoppip-art-dance-1toWE6hxIS6UE" class="text-faded">rock and roll</a>!</p>
tutorials.headline=Tutorials and Videos
support.headline=We Have the Foundations of Enterprise Support
support.github=Raise issues on <a href="https://github.com/actframework/actframework/issues">GitHub</a>
support.gitter=Watch the <a href="https://gitter.im/actframework/actframework">Gitter channel</a>
support.so=Use the <code>Act.Framework</code> tag on <a href="http://stackoverflow.com/questions/tagged/actframework">StackOverflow</a>
support.consulting=Enterprise consulting and support from <a href="https://thinking.studio">Thinking.Studio</a>
support.qq=If you write Chinese, you can join our very active QQ Group: 283919975
about.headline=Why Act.Framework?
about.body= <p>Back at the end of 2009, I had just finished a project in CakePHP as an individual consultant. I felt pretty frustrated with PHP and decided to get back to the Java world. I was not happy with Struts/w Spring and was hunting for other Java MVC frameworks. PlayFramework came into my sight and I fell in love with it.</p> <p>I loved PlayFramework v1.x because it was simple, clear and expressive. It brought us a completely different experience in web development with Java. However I don't totally agree with where Play 2.X is heading, and it looks like I am not the only person with the concern as per this <a href="https://groups.google.com/d/msg/play-framework/AcZs8GXNWUc/IanbqC-c-MkJ" target="_blank"> open letter to Play Framework Developers</a>.</p> <p>I <a target="_blank" href="http://software-lgl.blogspot.com.au/2012/12/thinking-about-creating-new-java-web.html">had thought</a> of rolling out something that could follow the road paved by Play 1.x; something that is simple, clear, expressive and developer friendly. About one and half years after that article was written, I decided I could start the project seriously. As a result, here is ACT.framework - a framework that I can call "the Final Fantasy of Java web development"</p> <p>In short, we need a modern, sleek Java MVC framework which we don't get from Spring MVC, Sprint Boot, PlayFramework, SparkFramework or any others on the market.</p> 
about.thankyou.headline=Thanks
about.studio=<a href="http://thinking.studio"> Thinking Studio </a> is the company that backed Act.Framework. Thanks for allowing me to work on this project and allow me to pilot Act.Framework on our projects since the end of 2015.
about.jetbrains=<a href="https://www.jetbrains.com/"> JetBrains </a> grants me the open source license to use the great product IntelliJ IDEA. Every line of code of Act.Framework is written with IntellJ IDEA, and really love it!